import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

## @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME', 'S3_BUCKET', 'GLUE_DBNAME', 'GLUE_TABLENAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
s3_path = "s3://{}/final-data".format(args['S3_BUCKET'])
## @type: DataSource
## @args: [database = args['GLUE_DBNAME'], table_name = args['GLUE_TABLENAME'], transformation_ctx = "datasource0"]
## @return: datasource0
## @inputs: []
datasource0 = glueContext.create_dynamic_frame.from_catalog(database = args['GLUE_DBNAME'], table_name = args['GLUE_TABLENAME'], transformation_ctx = "datasource0")
## @type: ApplyMapping
## @args: [mapping = [("timestamp", "string", "timestamp", "string"), ("host", "string", "host", "string"), ("program", "string", "program", "string"), ("kernel_logs", "string", "kernel_logs", "string")], transformation_ctx = "applymapping1"]
## @return: applymapping1
## @inputs: [frame = datasource0]
applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("timestamp", "string", "timestamp", "string"), ("host", "string", "host", "string"), ("program", "string", "program", "string"), ("kernel_logs", "string", "kernel_logs", "string")], transformation_ctx = "applymapping1")
## @type: DataSink
## @args: [connection_type = "s3", connection_options = {"path": s3_path}, format = "json", transformation_ctx = "datasink2"]
## @return: datasink2
## @inputs: [frame = applymapping1]
datasink2 = glueContext.write_dynamic_frame.from_options(frame = applymapping1, connection_type = "s3", connection_options = {"path": s3_path}, format = "json", transformation_ctx = "datasink2")
job.commit()